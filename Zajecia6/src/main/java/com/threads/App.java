/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.threads;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class App extends Application {
    ReentrantLock lock = new ReentrantLock();
    Condition condition = lock.newCondition();

    boolean working = true;

    ArrayList<runningObject> objects = new ArrayList<>();

    Thread animation = new Thread(new Runnable() {
        @Override
        public void run() {
            while (true) {

                try {
                    lock.lock();
                    if(!working)
                        condition.await();

                } catch (InterruptedException e) {
                    e.printStackTrace();
                }finally{
                    lock.unlock();
                }

                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        for (runningObject object : objects)
                            object.compute();
                    }
                });

                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    });

    private void switchState(){
        if(working){
            working=!working;
        }else{
            lock.lock();
            working = true;
            condition.signal();
            lock.unlock();
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Group group = new Group();
        Scene scene = new Scene(group, 500, 500);

        scene.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                switchState();
            }
        });

        primaryStage.setScene(scene);
        primaryStage.show();

        genV generator = genV.getInstance();
        runningObjBuilder builder = new runningObjBuilder(group);

        for(int i=0;i<100;i++)
            objects.add(builder.setColor(generator.getColor()).setRadius(10).build());

        animation.start();

    }

    @Override
    public void stop() throws Exception {
        super.stop();

    }
}
